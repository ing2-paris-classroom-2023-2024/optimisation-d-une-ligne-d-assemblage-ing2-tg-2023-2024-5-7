//
// Created by ansel on 03/12/2023.
//

#ifndef PROJET_S3_2_0_HEADER_H
#define PROJET_S3_2_0_HEADER_H

#endif //PROJET_S3_2_0_HEADER_H

#include <stdio.h>
#include <stdlib.h>

#define MAXOPE 100

typedef struct {
    int precedences[MAXOPE][MAXOPE];
    int nbOperations;
    int operationsTriees[MAXOPE];
    int nbPredecesseurs[MAXOPE];
    float temps[MAXOPE];
    int exclusion[MAXOPE][MAXOPE];
} donneeope;


void creermatrcie(donneeope *donnees) {
    for (int i = 0; i < MAXOPE; ++i) {
        for (int j = 0; j < MAXOPE; ++j) {
            donnees->precedences[i][j] = 0;
        }
        donnees->nbPredecesseurs[i] = 0;
    }
    donnees->nbOperations = 0;
}

void lirefichierprece(donneeope *donnees) {
    FILE *fichier = fopen("precedences.txt", "r");
    if (fichier == NULL) {
        printf("Impossible d'ouvrir le fichier.\n");
        return;
    }

    int ope1;
    int ope2;
    while (fscanf(fichier, "%d %d", &ope1, &ope2) == 2) {
        donnees->precedences[ope1 - 1][ope2 - 1] = 1;
        donnees->nbPredecesseurs[ope2 - 1]++;
        if (ope1 > donnees->nbOperations) {
            donnees->nbOperations = ope1;
        }

        if (ope2 > donnees->nbOperations) {
            donnees->nbOperations = ope2;
        }

    }

    fclose(fichier);
}

void lirefichiertemps(donneeope *donnees) {
    FILE *fichier = fopen("operations.txt", "r");
    if (fichier == NULL) {
        printf("Impossible d'ouvrir le fichier.\n");
        return;
    }

    int operation;
    float tempsope;
    while (fscanf(fichier, "%d %f", &operation, &tempsope) == 2) {
        donnees->temps[operation - 1] = tempsope;
    }

    fclose(fichier);
}
void lireFichierExclusions(donneeope *donnees) {
    FILE *fichier = fopen("exclusions.txt", "r");
    if (fichier == NULL) {
        printf("Impossible d'ouvrir le fichier d'exclusions.\n");
        return;
    }

    int ope1, ope2;
    while (fscanf(fichier, "%d %d", &ope1, &ope2) == 2) {
        donnees->exclusion[ope1 - 1][ope2 - 1] = 1;
        donnees->exclusion[ope2 - 1][ope1 - 1] = 1;
    }

    fclose(fichier);
}


void afficherGraphePrecedenceConsole(donneeope *donnees) {
    printf("Graphe de precedence :\n");
    for (int i = 0; i < donnees->nbOperations; ++i) {
        printf("operation %d : ", i + 1);
        for (int j = 0; j < donnees->nbOperations; ++j) {
            if (donnees->precedences[i][j]) {
                printf("%d -> %d   ", i + 1, j + 1);
            }
        }
        printf("\n");
    }
}
void afficherGrapheexcluConsole(donneeope *donnees) {
    printf("Graphe de exclu :\n");
    for (int i = 0; i < donnees->nbOperations; ++i) {
        printf("operation %d : ", i + 1);
        for (int j = 0; j < donnees->nbOperations; ++j) {
            if (donnees->exclusion[i][j]) {
                printf("%d -> %d   ", i + 1, j + 1);
            }
        }
        printf("\n");
    }
}

void trierOperations(donneeope *donnees) {
    //Initialiser operations triees
    for (int i = 0; i < donnees->nbOperations; ++i) {
        donnees->operationsTriees[i] = i;
    }

    //Tri Ã  bulles
    for (int i = 0; i < donnees->nbOperations - 1; ++i) {
        for (int j = 0; j < donnees->nbOperations - i - 1; ++j) {
            if (donnees->nbPredecesseurs[j] > donnees->nbPredecesseurs[j + 1]) {
                // echanger les positions des operations et de leurs nombres de predecesseurs
                int temp = donnees->nbPredecesseurs[j];
                donnees->nbPredecesseurs[j] = donnees->nbPredecesseurs[j + 1];
                donnees->nbPredecesseurs[j + 1] = temp;

                temp = donnees->operationsTriees[j];
                donnees->operationsTriees[j] = donnees->operationsTriees[j + 1];
                donnees->operationsTriees[j + 1] = temp;
            }
        }
    }
}

void tritopo(donneeope *donnees) {
    int degre[MAXOPE] = {0};
    int queue[MAXOPE];
    int devant = 0;
    int derriere = -1;

    // Initialiser file
    for (int i = 0; i < donnees->nbOperations; ++i) {
        int current = donnees->operationsTriees[i];
        for (int j = 0; j < donnees->nbOperations; ++j) {
            if (donnees->precedences[j][current]) {
                degre[current]++;
            }
        }
        if (degre[current] == 0) {
            queue[++derriere] = current;
        }
    }

    //tri topologique
    while (devant <= derriere) {
        int current = queue[devant++];
        donnees->operationsTriees[devant - 1] = current;

        for (int i = 0; i < donnees->nbOperations; ++i) {
            if (donnees->precedences[current][i]) {
                if (--degre[i] == 0) {
                    queue[++derriere] = i;
                }
            }
        }
    }
}

float calculerSommeTemps(donneeope *donnees) {
    float somme = 0;
    for (int i = 0; i < donnees->nbOperations; ++i) {
        somme += donnees->temps[donnees->operationsTriees[i]];
    }
    return somme;
}
